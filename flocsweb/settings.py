"""
Django settings for flocsweb project.

Generated by 'django-admin startproject' using Django 1.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import dj_database_url
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
EXPORTED_DATA_DIR = os.path.join(BASE_DIR, 'exported-data')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '34r0-rk47e3-ka+3d+@!@e+%a9qr##6duf0t(!#1sm$&zw&8!y'
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTOCOL', 'https')

ON_STAGING = os.getenv('ON_STAGING', "False") == "True"
ON_PRODUCTION = os.getenv('ON_AL', "False") == "True" and not ON_STAGING
DEVELOPMENT = not ON_STAGING and not ON_PRODUCTION
DEBUG = (not ON_PRODUCTION) or (os.getenv('DJANGO_DEBUG', "False") == "True")
SILK = os.getenv('SILK', "False") == "True"
ALLOWED_HOSTS = [
    '.robomise.cz'
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.contenttypes',
    'modeltranslation',  # must be before django.contrib.admin
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'webpack_loader',
    'import_export',
    'rest_framework',
    'lazysignup',
    'social_django',  # OAuth
    'tasks',
    'users',
    'practice',
    'flocsweb',
]

if SILK:
    INSTALLED_APPS.append('silk')  # Django profiling

APPEND_SLASH = True

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if SILK:
    MIDDLEWARE_CLASSES.append('silk.middleware.SilkyMiddleware')

ROOT_URLCONF = 'flocsweb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'flocsweb.wsgi.application'

# Database
DATABASES = {
    "default": dj_database_url.config(default='sqlite:///' +
                                              os.path.join(BASE_DIR, 'db.sqlite3'))
}

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
USE_I18N = True
USE_L10N = True
USE_TZ = False
# TIME_ZONE = 'UTC'
LANGUAGES = [
    ('cs', 'Czech'),
    ('en', 'English')
]
if ON_PRODUCTION:
    LANGUAGE_DOMAINS = {
        'cs': 'robomise.cz',
        'en': 'en.robomise.cz',
    }
elif ON_STAGING:
    LANGUAGE_DOMAINS = {
        'cs': 'staging.robomise.cz',
        'en': 'en.staging.robomise.cz',
    }
else:
    LANGUAGE_DOMAINS = {
        'cs': 'localhost:8000',
        'en': 'en.localhost:8000',
    }
LANGUAGE_CODE = 'cs'  # fallback language
MODELTRANSLATION_DEFAULT_LANGUAGE = 'en'
# MODELTRANSLATION_TRANSLATION_FILES = (
#    'tasks.models.translation',
#    'blocks.models.translation',
#    'concepts.models.translation',
# )


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'

# We do this so that django's collectstatic copies or our bundles to the
# STATIC_ROOT or syncs them to whatever storage we use.
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'frontend', 'static'),
)
STATIC_ROOT = os.path.join(BASE_DIR, '..', 'static')

# Webpack-Django communication when development
WEBPACK_LOADER = {
    'DEFAULT': {
        'STATS_FILE': os.path.join(BASE_DIR, 'frontend', 'webpack-stats.json')
    }
}

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.facebook.FacebookOAuth2',
    'lazysignup.backends.LazySignupBackend',
)

# Python Social Auth settings
SOCIAL_AUTH_URL_NAMESPACE = 'social'
SOCIAL_AUTH_ADMIN_USER_SEARCH_FIELDS = ['username', 'first_name', 'email']

SOCIAL_AUTH_FACEBOOK_KEY = os.getenv('SOCIAL_AUTH_FACEBOOK_KEY', '')
SOCIAL_AUTH_FACEBOOK_SECRET = os.getenv('SOCIAL_AUTH_FACEBOOK_SECRET', '')
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY', '')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET', '')

SOCIAL_AUTH_PIPELINE = (
    # Get the information we can about the user and return it in a simple
    # format to create the user instance later. On some cases the details are
    # already part of the auth response from the provider, but sometimes this
    # could hit a provider API.
    'social_core.pipeline.social_auth.social_details',

    # Get the social uid from whichever service we're authing thru. The uid is
    # the unique identifier of the given user in the provider.
    'social_core.pipeline.social_auth.social_uid',

    # Verifies that the current auth process is valid within the current
    # project, this is where emails and domains whitelists are applied (if
    # defined).
    'social_core.pipeline.social_auth.auth_allowed',

    # Log out users if the social-account is already associated. Remove lazy
    # user if the user will be associated.
    'flocsweb.pipeline.remove_current_user',

    # Checks if the current social-account is already associated in the site.
    'social_core.pipeline.social_auth.social_user',

    # Make up a username for this person, appends a random string at the end if
    # there's any collision.
    'social_core.pipeline.user.get_username',

    # Send a validation email to the user to verify its email address.
    # Disabled by default.
    # 'social_core.pipeline.mail.mail_validation',

    # Associates the current social details with another user account with
    # a similar email address. Disabled by default.
    # 'social_core.pipeline.social_auth.associate_by_email',

    # Create a user account if we haven't found one yet.
    'social_core.pipeline.user.create_user',

    # Create the record that associates the social account with the user.
    'social_core.pipeline.social_auth.associate_user',

    # Populate the extra_data field in the social record with the values
    # specified by settings (and the default ones like access_token, etc).
    'social_core.pipeline.social_auth.load_extra_data',

    # Update the user record with any changed info from the auth service.
    'social_core.pipeline.user.user_details',

    # Do extra login in cases where original user was logged out in the process.
    'flocsweb.pipeline.force_login',
)

LOGGING = {
    'version': 1,
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        }
    },
    'loggers': dict()
}

if DEBUG:
    LOGGING['loggers']['django.db.backends'] = {
        'level': 'DEBUG',
        'handlers': ['console'],
    }

# Profiling
#  SILKY_PYTHON_PROFILER = True
SILKY_DYNAMIC_PROFILING = [
    {
        'module': 'rest_framework.mixins',
        'function': 'CreateModelMixin.create'
    },
    {
        'module': 'rest_framework.mixins',
        'function': 'ListModelMixin.list'
    },
    {
        'module': 'rest_framework.mixins',
        'function': 'RetrieveModelMixin.retrieve'
    },
    {
        'module': 'rest_framework.mixins',
        'function': 'UpdateModelMixin.update'
    },
    {
        'module': 'practice.views',
        'function': 'StudentsViewSet.practice_overview'
    },
    {
        'module': 'practice.views',
        'function': 'StudentsViewSet.edit_program'
    },
    {
        'module': 'practice.views',
        'function': 'StudentsViewSet.run_program'
    },
]
